version: 2.1

orbs:
    node: circleci/node@3.0.1
    aws-ecr: circleci/aws-ecr@6.12.0
    k-connect: db-cci-ns/k-connect@0.5.0
    snyk: snyk/snyk@1.1.2
    # slack: circleci/slack@4.8.3
    # github-super-linter: circleci/github-super-linter@1.0.1
    # eslint: arrai/eslint@4.0.0

workflows:
  build_CCI:
    jobs:
      - build
      - unit_tests
      - macos-build-and-test
      - aws-ecr/build-and-push-image:
          executor:
            name: aws-ecr/default
            use-docker-layer-caching: true
          attach-workspace: true
          context: rp-deploy-secrets
          account-url: AWS_ECR_ACCOUNT_URL
          name: build_push_ecr
          repo: circle-demo-react
          tag: $CIRCLE_SHA1
          requires:
            - build
            - unit_tests
            - macos-build-and-test
      - hold:
          type: approval
          requires:
            - build_push_ecr
      - kconnect-and-deploy-eks:
          context: db-CE-deploy
          requires:
            - hold

jobs:
  build:
    docker: 
      - image: cimg/node:14.0.0
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: CYPRESS_INSTALL_BINARY=0 npm ci
      - snyk/scan:
          fail-on-issues: false
  
  unit_tests:
    docker:
      - image: cimg/node:14.0.0
    parallelism: 3
    steps:
      - checkout
      - restore_cache:
          keys:
              - node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
              - node-cache-v1-{{ .Branch }}-
              - node-cache-v1-
      - run:
          name: Fetch dependencies
          command: npm ci
      - save_cache:
          paths:
              - ~/.npm
              - ~/.cache
          key: node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Test application 
          command: |
            touch junit.xml
            TEST=$(circleci tests glob **/src/**/*.test.js | circleci tests split --split-by=timings)
            npm test $TEST
      - store_test_results:
          path: ~/project/test-results
      - store_artifacts:
          path: ~/project/test-results/junit.xml
  
  macos-build-and-test:
    working_directory: ~/demo-react-native
    macos:
      xcode: 12.5.0
    resource_class: large

    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    steps:
      - checkout
      - run: 
          name: Install command line tools
          command: |
            npm install -g react-native-version
            npm install -g react-native-cli
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
      - restore_cache:
          keys: 
            - pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
            - pods-v1-
      - run: 
          command: pod install
          working_directory: ios
      - run: 
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle
      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods
      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE
          working_directory: ios

      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan
  
  kconnect-and-deploy-eks:
    docker:
      - image: 'cimg/base:2021.04'
    environment:
    steps:
      - checkout
      - k-connect/install 
      - k-connect/configure:
          config_file_path: >-
            https://raw.githubusercontent.com/stone-monkeys/CircleCI-sample-project/main/config.yaml
      - k-connect/use:
          alias: eks-test-kconnect
          cluster_id: 'arn:aws:eks:eu-west-1:660990364978:cluster/db-cluster-cci'
          cluster_provider: eks
      - run:
          command: kubectl get all
          name: Test kconnect connection
      - k-connect/to:
          alias: eks-test-kconnect
      - run:
          name: Deploy using Kustomize
          command: kubectl apply -k ./deploy
      - run:
          name: KGA
          command: kubectl get all
