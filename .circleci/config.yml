# indicated what version of circleci is running. Essential to state this due to feature updates etc
version: 2.1

# Orbs are a prepared package that contains reusable CircleCI config that can be used across projects
# Using the Herouku orb that has jobs such as heroku/deploy-via-git 
# orbs:
#   heroku: circleci/heroku@0.0.10 # Invoke the Heroku orb
orbs:
    node: circleci/node@3.0.1
    aws-ecr: circleci/aws-ecr@6.12.0
    heroku: circleci/heroku@1.2.6
    helm: circleci/helm@1.2.0
    aws-eks: circleci/aws-eks@1.0.0
    kustomize: finc/kustomize@0.0.2

executors:
  node:
    docker: 
      - image: cimg/node:14.0.0
workflows:
  build_CCI:
    jobs:
      - build
      - unit_tests:
          requires: 
            - build
      - build_kustomize
      - aws-ecr/build-and-push-image:
          executor:
            name: aws-ecr/default
            use-docker-layer-caching: true
          attach-workspace: true
          context: rp-deploy-secrets
          account-url: AWS_ECR_ACCOUNT_URL
          name: build_push_ecr
          repo: circle-demo-react
          tag: $CIRCLE_SHA1
          requires:
            - unit_tests
      - hold_eks:
          type: approval
          requires:
            - build_push_ecr
      - helm_eks:
          context: rp-deploy-secrets
          requires:
            - hold_eks

# Collection of steps to run in a CCI build process. We have one job here - build. Build has 6 steps
# The heroku orb will also add another job - heroku/deploy-via-git
jobs:
  build:
    executor: node
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: CYPRESS_INSTALL_BINARY=0 npm ci
  
  unit_tests:
    docker:
      - image: cimg/node:14.0.0
    parallelism: 3
    steps:
      - checkout
      - restore_cache:
          keys:
              # when lock file changes, use increasingly general patterns to restore cache
              - node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
              - node-cache-v1-{{ .Branch }}-
              - node-cache-v1-
      - run:
          name: Fetch dependencies
          command: npm ci
      - save_cache:
          paths:
              - ~/.npm
              - ~/.cache
          key: node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Test application 
          command: |
            TEST=$(circleci tests glob **/src/**/*.test.js | circleci tests split --split-by=timings)
            npm test $TEST
  
  build_kustomize:
    docker:
      - image: 'circleci/golang:1.15'
    steps:
      - checkout
      - kustomize/install
      
  helm_eks:
    docker:
      - image: circleci/python:3.7
    environment:
      IMAGE: ${AWS_CONTAINER_ID}
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          install-kubectl: true
          verbose: true
      - helm/install-helm-client:
          version: v3.0.0
      - helm/upgrade-helm-chart:
          chart: ./helm-charts/react-app-chart
          release-name: react-app-chart-1620714714
          values-to-override: image.tag=${CIRCLE_SHA1},image.repository=${AWS_CONTAINER_ID}

  
  # build:
  #   docker:
  #       - image: cimg/node:12.16
  #   parallelism: 5
  #   steps:
  #       - checkout
  #       - node/install-packages:
  #           pkg-manager: yarn      
  #       - run: mkdir ~/junit
  #       - run:
  #           name: Test application
  #           command: |
  #               TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split --split-by=timings)
  #               yarn test 
  #       - run:
  #           command: cp junit.xml ~/junit/
  #           when: always
  #       - store_test_results:
  #           path: ~/junit
  #       - store_artifacts:
  #           path: ~/junit


  # build:
  #   docker:
  #     - image: circleci/node:12.9.1-browsers
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - run: 
  #         name: mkdir for test results
  #         command: mkdir ~/test-results
  #     - run:
  #         name: Update NPM
  #         command: "sudo npm install -g npm@5"
  #     - restore_cache:
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #     - run:
  #         name: Install Dependencies
  #         command: npm install
  #     - save_cache:
  #         paths:
  #           - ./node_modules
  #           - ~/.npm
  #           - ~/.cache
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #     - run:
  #         name: Run tests 
  #         command: |
  #           TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split)
            
  #           npm test $TEST -o ~/test-results
  #     - store_test_results:
  #         path: ~/test-results
  #     - run:
  #         echo "${CIRCLE_BRANCH}"