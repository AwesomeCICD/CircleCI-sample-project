version: 2.1

parameters:
  cleanup:
    type: boolean
    default: false
    description: Should this run cleanup an old deploy?
  version:
    type: string
    default: ""
    description: the version (latest or prior) to be deleted
  job_name:
    type: string
    default: delete deployment

orbs:
    node: circleci/node@3.0.1
    aws-ecr: circleci/aws-ecr@6.12.0
    k-connect: db-cci-ns/k-connect@0.5.0
    snyk: snyk/snyk@1.1.2
    kubernetes:   circleci/kubernetes@1.3.0

    # slack: circleci/slack@4.8.3
    # github-super-linter: circleci/github-super-linter@1.0.1
    # eslint: arrai/eslint@4.0.0

workflows:
  build_CCI:
    unless: << pipeline.parameters.cleanup >>
    jobs:
      - build
      - unit_tests
      - build-and-push-image:
          context: rp-deploy-secrets
          requires:
            - build
            - unit_tests
      - hold:
          type: approval
          requires:
            - build-and-push-image
      - kconnect-and-deploy-eks:
          context: db-CE-deploy
          requires:
            - hold
      # - update-deployment:
      #     context: rp-deploy-secrets
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         only: vamp



  the-fixer:
    when: << pipeline.parameters.cleanup >>
    jobs:
      - delete-deployment:
          name: << pipeline.parameters.job_name >>

jobs:

  build:
    docker: 
      - image: cimg/node:14.0.0
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: CYPRESS_INSTALL_BINARY=0 npm ci
      - snyk/scan:
          fail-on-issues: false
  
  unit_tests:
    docker:
      - image: cimg/node:14.0.0
    parallelism: 3
    steps:
      - checkout
      - restore_cache:
          keys:
              - node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
              - node-cache-v1-{{ .Branch }}-
              - node-cache-v1-
      - run:
          name: Fetch dependencies
          command: npm ci
      - save_cache:
          paths:
              - ~/.npm
              - ~/.cache
          key: node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Test application 
          command: |
            touch junit.xml
            TEST=$(circleci tests glob **/src/**/*.test.js | circleci tests split --split-by=timings)
            npm test $TEST
      - store_test_results:
          path: ~/project/test-results
      - store_artifacts:
          path: ~/project/test-results/junit.xml
  
  build-and-push-image:
    executor:
        name: aws-ecr/default
        use-docker-layer-caching: true
    steps: 
      - set-build-env
      - aws-ecr/build-and-push-image:
            executor:
              name: aws-ecr/default
              use-docker-layer-caching: true
            attach-workspace: true
            account-url: AWS_ECR_ACCOUNT_URL
            repo: circle-demo-react
            tag: $VERSION

  kconnect-and-deploy-eks:
    docker:
      - image: 'cimg/base:2021.04'
    environment:
    steps:
      - checkout
      - k-connect/install 
      - k-connect/configure:
          config_file_path: >-
            https://raw.githubusercontent.com/stone-monkeys/CircleCI-sample-project/main/config.yaml
      - k-connect/use:
          alias: eks-test-kconnect
          cluster_id: 'arn:aws:eks:eu-west-1:660990364978:cluster/db-cluster-cci'
          cluster_provider: eks
      - run:
          command: kubectl get all
          name: Test kconnect connection
      - k-connect/to:
          alias: eks-test-kconnect
      - run:
          name: Deploy using Kustomize
          command: kubectl apply -k ./deploy
      - run:
          name: KGA
          command: kubectl get all

  update-deployment:
    docker: 
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install gettext-base graphviz
      - set-build-env
      - run: 
          name: Update image & version in manifest
          command: |
            envsubst < vamp/demo-deployment.yml > modified-deployment.yaml
            cat modified-deployment.yaml
      - kubernetes/install-kubectl
      - run:
          name: Create minimal kubeconfig for Service Account
          command: |
            export DECODED_TOKEN=$(echo ${SE_DEMO_CLUSTER_CCI_USER_TOKEN} | base64 -d)
            echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1ESXdPREUwTlRJeE5Wb1hEVE15TURJd05qRTBOVEl4TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTzZUCmM0UWJJc1N5ZXZyTnFHMW05UEdiNVBHOTZ1akNrT2IxV3NLbmJ5ZGhtSWJTSUNIVElUd1FicXp1VXFtcGYrbW4KYWdzUkUvVjhCakNoeUQ4UGhPMFNXcWlpc0xETy9yUjFUY2swdm1kV1Z3N1VFQWFEUUZEN29Qb3RaTFFMR2lFSQpxelErQ3N0K2N4Z3ZlVUhsUHdCd20zZ2xkWTFtOGsvWFpWUHJ0Qmw5OGRDaGtEMmo0a2dWOGpESzNsTVVYT3luCmNYRGtYYkZMK0hyYVc3WjFEdXM2ZXVIblVZUC90UEpCVXFHQ1czMnl0Z2pQa1pFd3Q2aUJUNEJsZkxRNDF4YXYKYnZGSCt0SEdWUlplcW9uQXZYdVZielk1QXRTRVNhM0x6TUFwdVR2WlFpYVh2MW9SRC8renhBeVRGUDJhU1ladwpQR2pBd1ptZXh6N1ZMbU9nd0ZrQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZMTEsxTUxuRmIyT0hMK01lNUpEYnVKNGFXbWZNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFEcWpaOHNiV2ROZUxKQTZ3YmVxUDBUQWVPK0F6Ukg3QjZ3TCtjTzlPV2FIQzZSaDVMQgp4elNDb0wzZ1YrWEdxSmZWOW1jeVpvanJkanVmY0FuZnV0b2ZLTmVLL1BJTjUzdjFoeFZJbmZiYkNMS0JRRWFhCkNoMlcyd0ZlRHZaSzgwZndIY0kvL01zd2RQa0NUT3FLZThHY2RUbWRMS0g4MVpJUjFUbm5SRWZ0RTNUcDFrUVAKbnpzR29lMU16TFpaRW1DenBFQVowd1c1eVpscXNGZEpPKzR4RkdtOFFEWDRDeC9XZC85bituM2NhMElORC9ndgpmM292YWgzZWhTRWtiTmQ5d0V1Y2dxNEtPejFwZFNHQ20wR0JYOVNXZGVyUXQyMER6L1lXQzdGTHFKUmZVMUNtCkhBYk44Q08rOXp4RWIzVnBvSFNvWDNrVzl6Yzhpdmk4RGVLRgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== | base64 -d > ca.crt
            kubectl config set-cluster db-cluster-cci --server=https://072417729327075A95E54022FCE204E4.sk1.eu-west-1.eks.amazonaws.com --certificate-authority=ca.crt
            kubectl config set-credentials derrysbot --token=${DECODED_TOKEN}
            kubectl config set-context cci --user=derrysbot --namespace=default --cluster=db-cluster-cci
            kubectl config use-context cci
      - kubernetes/create-or-update-resource:
          namespace: default
          resource-file-path: modified-deployment.yaml
      - run: kubectl rollout status -f modified-deployment.yaml
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 10 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png
    environment:
      DOCKER_IMAGE: circleci-demo-app

  delete-deployment:
    docker: 
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install graphviz
      - kubernetes/install-kubectl
      - run:
          name: Create minimal kubeconfig for Service Account
          command: |
            export DECODED_TOKEN=$(echo ${SE_DEMO_CLUSTER_CCI_USER_TOKEN} | base64 -d)
            echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1ESXdPREUwTlRJeE5Wb1hEVE15TURJd05qRTBOVEl4TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTzZUCmM0UWJJc1N5ZXZyTnFHMW05UEdiNVBHOTZ1akNrT2IxV3NLbmJ5ZGhtSWJTSUNIVElUd1FicXp1VXFtcGYrbW4KYWdzUkUvVjhCakNoeUQ4UGhPMFNXcWlpc0xETy9yUjFUY2swdm1kV1Z3N1VFQWFEUUZEN29Qb3RaTFFMR2lFSQpxelErQ3N0K2N4Z3ZlVUhsUHdCd20zZ2xkWTFtOGsvWFpWUHJ0Qmw5OGRDaGtEMmo0a2dWOGpESzNsTVVYT3luCmNYRGtYYkZMK0hyYVc3WjFEdXM2ZXVIblVZUC90UEpCVXFHQ1czMnl0Z2pQa1pFd3Q2aUJUNEJsZkxRNDF4YXYKYnZGSCt0SEdWUlplcW9uQXZYdVZielk1QXRTRVNhM0x6TUFwdVR2WlFpYVh2MW9SRC8renhBeVRGUDJhU1ladwpQR2pBd1ptZXh6N1ZMbU9nd0ZrQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZMTEsxTUxuRmIyT0hMK01lNUpEYnVKNGFXbWZNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFEcWpaOHNiV2ROZUxKQTZ3YmVxUDBUQWVPK0F6Ukg3QjZ3TCtjTzlPV2FIQzZSaDVMQgp4elNDb0wzZ1YrWEdxSmZWOW1jeVpvanJkanVmY0FuZnV0b2ZLTmVLL1BJTjUzdjFoeFZJbmZiYkNMS0JRRWFhCkNoMlcyd0ZlRHZaSzgwZndIY0kvL01zd2RQa0NUT3FLZThHY2RUbWRMS0g4MVpJUjFUbm5SRWZ0RTNUcDFrUVAKbnpzR29lMU16TFpaRW1DenBFQVowd1c1eVpscXNGZEpPKzR4RkdtOFFEWDRDeC9XZC85bituM2NhMElORC9ndgpmM292YWgzZWhTRWtiTmQ5d0V1Y2dxNEtPejFwZFNHQ20wR0JYOVNXZGVyUXQyMER6L1lXQzdGTHFKUmZVMUNtCkhBYk44Q08rOXp4RWIzVnBvSFNvWDNrVzl6Yzhpdmk4RGVLRgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== | base64 -d > ca.crt
            kubectl config set-cluster db-cluster-cci --server=https://072417729327075A95E54022FCE204E4.sk1.eu-west-1.eks.amazonaws.com --certificate-authority=ca.crt
            kubectl config set-credentials derrysbot --token=${DECODED_TOKEN}
            kubectl config set-context cci --user=derrysbot --namespace=default --cluster=db-cluster-cci
            kubectl config use-context cci
      
      - run:
          name: Delete deployment << pipeline.parameters.version >>
          command: kubectl -n default delete deployment circleci-demo-app-v<<pipeline.parameters.version>>
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 2 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png

commands:
  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV