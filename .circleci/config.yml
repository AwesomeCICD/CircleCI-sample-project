# indicated what version of circleci is running. Essential to state this due to feature updates etc
version: 2.1

# Orbs are a prepared package that contains reusable CircleCI config that can be used across projects
# Using the Herouku orb that has jobs such as heroku/deploy-via-git (line 13)
# orbs:
#   heroku: circleci/heroku@0.0.10 # Invoke the Heroku orb
orbs:
    node: circleci/node@3.0.1

executors:
  node:
    docker: 
      - image: cimg/node:14.0.0
# Workflow refers to a set of rules defining a collection of jobs and their run order.
# In this case the deployment will not be carried out unless our tests pass. We can
# also see that we have limited the job to our main branch. Our code will only 
# be deployed on changes to this branch
workflows:
  build_CCI:
    jobs:
      - build
      - unit_tests:
          requires: 
            - build
      # - heroku/deploy-via-git: # Use the pre-configured job, deploy-via-git
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: main

# Collection of steps to run in a CCI build process. We have one job here - build. Build has 6 steps
# The heroku orb will also add another job - heroku/deploy-via-git
jobs:
  build:
    executor: node
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: CYPRESS_INSTALL_BINARY=0 npm ci
  
  unit_tests:
    docker:
      - image: cimg/node:14.0.0
    parallelism: 10
    steps:
      - checkout
      - restore_cache:
          keys:
              # when lock file changes, use increasingly general patterns to restore cache
              - node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
              - node-cache-v1-{{ .Branch }}-
              - node-cache-v1-
      - run:
          name: Fetch dependencies
          command: npm ci
      - save_cache:
          paths:
              - ~/.npm
              - ~/.cache
          key: node-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Test application 
          command: |
            TEST=$(circleci tests glob **/src/**/*.test.js | circleci tests split --split-by=timings)
            npm test $TEST
      # - store_test_results:
      #     path: ~/project/test-results
      # - store_artifacts:
      #     path: ~/project/test-results/junit.xml
  # build:
  #   docker:
  #       - image: cimg/node:12.16
  #   parallelism: 5
  #   steps:
  #       - checkout
  #       - node/install-packages:
  #           pkg-manager: yarn      
  #       - run: mkdir ~/junit
  #       - run:
  #           name: Test application
  #           command: |
  #               TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split --split-by=timings)
  #               yarn test 
  #       - run:
  #           command: cp junit.xml ~/junit/
  #           when: always
  #       - store_test_results:
  #           path: ~/junit
  #       - store_artifacts:
  #           path: ~/junit


  # build:
  #   docker:
  #     - image: circleci/node:12.9.1-browsers
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - run: 
  #         name: mkdir for test results
  #         command: mkdir ~/test-results
  #     - run:
  #         name: Update NPM
  #         command: "sudo npm install -g npm@5"
  #     - restore_cache:
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #     - run:
  #         name: Install Dependencies
  #         command: npm install
  #     - save_cache:
  #         paths:
  #           - ./node_modules
  #           - ~/.npm
  #           - ~/.cache
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #     - run:
  #         name: Run tests 
  #         command: |
  #           TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split)
            
  #           npm test $TEST -o ~/test-results
  #     - store_test_results:
  #         path: ~/test-results
  #     - run:
  #         echo "${CIRCLE_BRANCH}"